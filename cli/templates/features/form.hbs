import { useEffect } from 'react';
import { Card, Form, Row, Col, Button, {{formInputs}} } from 'antd';
import { SaveOutlined } from '@ant-design/icons';
import { use{{hooksName.form}}Form } from '@hooks/{{hooksFileName}}';
import { useFormValidation } from '@hooks/utility-hooks/use-form-validation';
import { {{modelName}}, {{modelName}}Partial } from '@models/{{modelFileName}}';
import { validationMessage } from '@utils/helpers/message-helpers';

interface {{formName}}FormProps {
  initialValues?: {{modelName}}Partial;
  isEditMode?: boolean;
}

const {{formName}}Form = ({
  initialValues,
  isEditMode = false
}: {{formName}}FormProps) => {
  const [form] = Form.useForm();

  const formTitle = `${isEditMode ? 'Edit ' : 'Create'} {{formTitle}}`;
  const formValues = Form.useWatch([], form);
  const isFormValid = useFormValidation(form, formValues);

  const { onSaved, isLoading } = use{{hooksName.form}}Form();

  useEffect(() => {
    if (initialValues) {
      form.setFieldsValue({
      ...initialValues
      });
    }
  }, [initialValues]);

  const onFinished = (values: {{modelName}}) => {
    values.id = isEditMode ? initialValues?.id ?? 0 : 0;
    onSaved(values);
  };

  return (
    <Form
      form={form}
      layout="vertical"
      autoComplete="off"
      initialValues={initialValues}
      onFinish={onFinished}
    >
      <Card title={formTitle}>
        <Row gutter={24}>
          {{#each fields}}
          <Col span={12}>
            <Form.Item
              label="{{title}}"
              name="{{name}}"
              {{#if required}}
              rules={[
                { required: true, message: validationMessage('{{title}}') }
              ]}
              {{/if}}
            >
              {{#if (eq type 'boolean')}}
              <Switch />
              {{/if}}
              {{#if (eq type 'number')}}
              <Select
                options={[]}
                placeholder="Select {{placeholder}}"
                allowClear
              />
              {{/if}}
              {{#if (eq type 'string')}}
              <Input placeholder="{{placeholder}}" />
              {{/if}}
            </Form.Item>
          </Col>
          {{/each}}
        </Row>
      </Card>
      <Row className="my-6">
        <Col span={24} className="text-right">
          <Button
            type="primary"
            htmlType="submit"
            icon={<SaveOutlined />}
            loading={isLoading}
            disabled={!isFormValid}
          >
            Save changes
          </Button>
        </Col>
      </Row>
    </Form>
  );
};

export default {{formName}}Form;
